swagger: "2.0"
/hobbies:
  post:
    tags:
      - hobbies
    summary: Create hobbie
    description: This can only be done by the logged in user.
    operationId: createHobbie
    produces:
      - application/json
      - application/xml
    parameters:
      - in: body
        name: body
        description: Created hobbie object
        required: false
        schema:
          $ref: "#/definitions/Hobbie"
    responses:
      default:
        description: successful operation
  get:
    tags:
      - hobbies
    summary: Get hobbies by query params
    description: ""
    operationId: getUserByPrams
    produces:
      - application/json
      - application/xml
    parameters:
      - name: hobbieId
        in: query
        description: "Get hobbie by ID"
        type: string
        required: false
      - name: createdStart
        in: query
        description: "CreatedAT Between (Start) Ex: 2019-07-01 00:00:00"
        type: string
        required: false
      - name: createdEnd
        in: query
        description: "CreatedAT Between (End) Ex: 2019-07-13 23:59:59"
        type: string
        required: false
      - name: isActive
        in: query
        description: "Filter by user status (isActive)"
        type: number
        enum: [0,1]
        required: false
    responses:
      "200":
        description: successful operation
        type: array
        schema:
          $ref: "#/definitions/Hobbie"
      "400":
        description: Invalid username supplied
      "404":
        description: User not found
  put:
    tags:
      - hobbies
    summary: Updated hobbie
    description: This can only be done by the logged in user.
    operationId: updateHobbie
    produces:
      - application/json
      - application/xml
    parameters:
      - in: body
        name: body
        description: Updated user object
        required: false
        schema:
          $ref: "#/definitions/Hobbie"
    responses:
      "400":
        description: Invalid user supplied
      "404":
        description: User not found
"/hobbies/{hobbieId}":
  delete:
    tags:
      - hobbies
    summary: Delete hobbie by UUID
    description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
    operationId: deleteHobbie
    produces:
      - application/json
      - application/xml
    parameters:
      - name: hobbieId
        in: path
        description: ID of the hobbie that needs to be deleted
        required: true
        type: string
    responses:
      "400":
        description: Invalid ID supplied
      "404":
        description: Order not found
/hobbies/status:
  put:
    tags:
      - hobbies
    summary:  Change hobbie status
    description: "Status [ true, false]"
    operationId: UpdateHobbieStatus
    produces:
      - application/json
      - application/xml
    parameters:
      - in: body
        name: body
        description: Updated hobbie object
        required: false
        schema:
        type: object
        properties:
          hobbieId:
            type: string
            required: true
            format: uuid
          isActive:
            type: number
            required: true
            enum:
            - true
            - false
    responses:
      "400":
        description: Invalid user supplied
      "404":
        description: User not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: "http://petstore.swagger.io/api/oauth/dialog"
    flow: implicit
    scopes:
      "write:pets": modify pets in your account
      "read:pets": read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Hobbie:
    required:
      - hobbieId
      - hobbieName
    properties:
      hobbieId:
        type: string
        format: uuid
      hobbieName:
        type: string
      hobbieDescription:
        type: string
      createAt:
        type: string
        format: date-time
      updateAT:
        type: string
        format: date-time
      isActive:
        type: boolean
        default: true
        description: Hobbie Status