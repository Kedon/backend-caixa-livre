swagger: "2.0"
/users:
  post:
    tags:
      - user
    summary: Create user
    description: This can only be done by the logged in user.
    operationId: createUser
    produces:
      - application/json
      - application/xml
    parameters:
      - in: body
        name: body
        description: Created user object
        required: false
        schema:
          $ref: "#/definitions/User"
    responses:
      default:
        description: successful operation
        "/user/{username}":
  get:
    tags:
      - user
    summary: Get user by query params
    description: ""
    operationId: getUserByPrams
    produces:
      - application/json
      - application/xml
    parameters:
      - name: userId
        in: query
        description: "Get user by ID"
        type: string
        required: false
      - name: createdStart
        in: query
        description: "CreatedAT Between (Start) Ex: 2019-07-01 00:00:00"
        type: string
        required: false
      - name: createdEnd
        in: query
        description: "CreatedAT Between (End) Ex: 2019-07-13 23:59:59"
        type: string
        required: false
      - name: birthDateStart
        in: query
        description: "birthDate Between (Start) Ex: 2019-07-01 00:00:00"
        type: string
        required: false
      - name: birthDateEnd
        in: query
        description: "birthDate Between (End) Ex: 2019-07-13 23:59:59"
        type: string
        required: false
      - name: state
        in: query
        description: "Filter by user status (isActive)"
        type: string
        enum: ['ACTIVE','BLOCKED', 'DELETED', 'BANNED', 'PENDING']
        required: false
    responses:
      "200":
        description: successful operation
        schema:
          $ref: "#/definitions/User"
      "400":
        description: Invalid username supplied
      "404":
        description: User not found
  put:
    tags:
      - user
    summary: Updated user
    description: This can only be done by the logged in user.
    operationId: updateUser
    produces:
      - application/json
      - application/xml
    parameters:
      - in: body
        name: body
        description: Updated user object
        required: false
        schema:
          $ref: "#/definitions/User"
    responses:
      "400":
        description: Invalid user supplied
      "404":
        description: User not found
  # delete:
  #   tags:
  #     - user
  #   summary: Delete user
  #   description: This can only be done by the logged in user.
  #   operationId: deleteUser
  #   produces:
  #     - application/json
  #     - application/xml
  #   parameters:
  #     - name: userId
  #       in: query
  #       description: The userId that needs to be deleted
  #       required: true
  #       type: string
  #   responses:
  #     "400":
  #       description: Invalid username supplied
  #     "404":
  #       description: User not found
/users/status:
  put:
    tags:
      - user
    summary:  Change user status
    description: "Status ['ACTIVE','BLOCKED', 'DELETED', 'BANNED', 'PENDING']"
    operationId: UpdateUserState
    produces:
      - application/json
      - application/xml
    parameters:
      - in: body
        name: body
        description: Updated user object
        required: false
        schema:
        type: object
        properties:
          userId:
            type: string
            required: true
            format: uuid
          state:
            type: string
            required: true
            enum:
            - ACTIVE
            - BLOCKED
            - DELETED
            - BANNED
            - PENDING
    responses:
      "400":
        description: Invalid user supplied
      "404":
        description: User not found
/users/{userId}/hobbies:
  post:
    tags:
      - user
    summary: Create user hobbies
    description: This can only be done by the logged in user.
    operationId: createUserHobbies
    produces:
      - application/json
      - application/xml
    parameters:
      - in: path
        name: userId
        description: ID of the hobbie that needs to be deleted
        required: true
        type: string
      - in: body
        name: body
        description: Created user object
        required: false
        schema:
         type: object
         properties:
          required:
          - hobbiesList
          hobbiesList:
            type: array
            items:
                type: string
                format: uuid
    responses:
      default:
        description: successful operation
        "/user/{userId}":
  get:
    tags:
      - user
    summary: List hobbies by userId
    description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
    operationId: getUserHobbies
    produces:
      - application/json
      - application/xml
    parameters:
      - name: userId
        in: path
        description: ID of the user that list your hobbies
        required: true
        type: string
    responses:
      "400":
        description: Invalid ID supplied
      "404":
        description: Order not found
  delete:
    tags:
      - user
    summary: Delete user hobbies not in array
    description: This can only be done by the logged in user.
    operationId: deleteUserHobbies
    produces:
      - application/json
      - application/xml
    parameters:
      - in: path
        name: userId
        description: ID of the hobbie that needs to be deleted
        required: true
        type: string
      - in: body
        name: body
        description: Delete user object
        required: false
        schema:
         type: object
         properties:
          required:
          - hobbiesList
          hobbiesList:
            type: array
            items:
                type: string
                format: uuid
    responses:
      default:
        description: successful operation
        "/user/{userId}":
"/users/{userId}/images":
  post:
    tags:
      - user
    summary: uploads an image
    x-swagger-router-controller: UploadUser Image
    description: ""
    operationId: uploadUserFileByID
    consumes:
      - multipart/form-data
    produces:
      - application/json
    parameters:
      - name: userId
        in: path
        description: ID of pet to update
        required: true
        type: string
      # - name: body
      #   in: body
      #   description: Created user object
      #   required: false
      #   schema:
      #     $ref: "#/definitions/userPhotos"
      - name: photo
        in: formData
        description: Additional data to pass to server
        required: false
        type: object
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
    responses:
      "200":
        description: successful operation
        schema:
          $ref: "#/definitions/ApiResponse"
  get:
      tags:
        - user
      summary: Get user by query params
      description: ""
      operationId: getUserImagesByPrams
      produces:
        - application/json
        - application/xml
      parameters:
        - name: userId
          in: path
          description: "Get user by ID"
          type: string
          required: true
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/userPhotos"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
# /user/createWithArray:
#   post:
#     tags:
#       - user
#     summary: Creates list of users with given input array
#     description: ""
#     operationId: createUsersWithArrayInput
#     produces:
#       - application/xml
#       - application/json
#     parameters:
#       - in: body
#         name: body
#         description: List of user object
#         required: false
#         schema:
#           type: array
#           items:
#             $ref: "#/definitions/User"
#     responses:
#       default:
#         description: successful operation
# /user/createWithList:
#   post:
#     tags:
#       - user
#     summary: Creates list of users with given input array
#     description: ""
#     operationId: createUsersWithListInput
#     produces:
#       - application/xml
#       - application/json
#     parameters:
#       - in: body
#         name: body
#         description: List of user object
#         required: false
#         schema:
#           type: array
#           items:
#             $ref: "#/definitions/User"
#     responses:
#       default:
#         description: successful operation
# /user/login:
#   get:
#     tags:
#       - user
#     summary: Logs user into the system
#     description: ""
#     operationId: loginUser
#     produces:
#       - application/xml
#       - application/json
#     parameters:
#       - name: username
#         in: query
#         description: The user name for login
#         required: false
#         type: string
#       - name: password
#         in: query
#         description: The password for login in clear text
#         required: false
#         type: string
#     responses:
#       "200":
#         description: successful operation
#         schema:
#           type: string
#         headers:
#           X-Rate-Limit:
#             type: integer
#             format: int32
#             description: calls per hour allowed by the user
#           X-Expires-After:
#             type: string
#             format: date-time
#             description: date in UTC when toekn expires
#       "400":
#         description: Invalid username/password supplied
# /user/logout:
#   get:
#     tags:
#       - user
#     summary: Logs out current logged in user session
#     description: ""
#     operationId: logoutUser
#     produces:
#       - application/xml
#       - application/json
#     parameters: []
#     responses:
#       default:
#         description: successful operation
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: "http://petstore.swagger.io/api/oauth/dialog"
    flow: implicit
    scopes:
      "write:pets": modify pets in your account
      "read:pets": read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    required:
      - userId
      - firstName
      - email
      - password
    properties:
      userId:
        type: string
        format: uuid
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      birthDate:
        type: string
        format: date
      genre:
        type: string
        enum: 
          - MALE
          - FEMALE
      createAt:
        type: string
        format: date-time
      updateAT:
        type: string
        format: date-time
      state:
        type: string
        default: 'PENDING'
        description: User Status
        enum:
        - ACTIVE
        - BLOCKED
        - DELETED
        - BANNED
        - PENDING
  userPhotos:
    required:
      - userId
      - photoName
      - photoUrl
      - photoId
    properties:
      userId:
        type: string
        format: uuid
      photoId:
        type: string
        format: uuid
      photoName:
        type: string
      photoUrl:
        type: string
      photoDescription:
        type: string